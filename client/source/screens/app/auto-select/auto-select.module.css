body {
  transition-duration: var(--app-root-view-transition-duration);
  transition-property: background;
}

.autoSelectionView {
  display: grid;
  width: calc(100% * var(--side-padding));
  height: 100dvh;
  color: var(--white);
  background: linear-gradient(
    to bottom right,
    var(--space-cadet-900),
    var(--space-cadet-800),
    var(--space-cadet-700),
    var(--space-cadet-600),
    var(--space-cadet-500),
    var(--space-cadet-450)
  );
  background-position: 50% 0;
  background-size: 400%;
  animation: background-dance calc(var(--default-duration) * 100) infinite;

  view-transition-name: app-root-view;
  padding-inline: var(--side-padding);
  grid-template-rows: auto auto;
  gap: min(15px, 2dvh);

  &[data-state='success'] {
    place-items: center;
    grid-template-columns: 1fr;
    padding-inline: 0;

    .backButton {
      margin-left: var(--side-padding);
      justify-self: start;
    }
  }

  @media (orientation: landscape) {
    background: transparent;

    body:has(&) {
      background: var(--space-cadet-900);
    }
  }
}

@keyframes background-dance {
  0% {
    background-position: 0 50%;
  }
  50% {
    background-position: 50% 0;
  }
  100% {
    background-position: 0 50%;
  }
}

.autoSelectionLoader {
  align-self: end;
  width: min(90px, 7dvh);
  opacity: 0;
  animation: var(--fade-in) calc(var(--default-duration) * 5) both
      calc(var(--default-duration) * 3),
    var(--loader-spin) var(--base-animation-duration) infinite;
  justify-self: center;
  grid-row: 1;
  grid-column: 1;

  @media (orientation: landscape) {
    opacity: 1;
    animation: var(--loader-spin) var(--base-animation-duration) infinite;
  }
}

.backButton:is(.backButton) {
  /* :is() forces specificity override. */
  display: none;

  @media (display-mode: standalone) {
    z-index: 1;
    display: grid;
    align-self: start;
    grid-row: 1;
    grid-column: 1;
  }
}

.heading {
  align-self: start;
  max-width: 60dvw;
  min-height: calc(var(--subtitle-font-size) * 3);
  opacity: 0;
  animation: var(--fade-in) calc(var(--default-duration) * 5)
      var(--default-duration) both,
    var(--fade-out) 6 calc(var(--default-duration) * 25);
  text-align: center;
  font: var(--subtitle-bold);
  justify-self: center;
  grid-row: 2;
  grid-column: 1;

  @media (orientation: landscape) {
    opacity: 1;
    animation: var(--fade-out) 6 calc(var(--default-duration) * 25);
  }
}

@property --knob {
  syntax: '<number>';
  initial-value: 0;
  inherits: true;
}

.goalCards {
  /* Reducing the constant will make the cards at the back of the stack darker. */
  --dim-factor: calc(var(--total) * 2);
  /* Reducing the constant will make the cards at the back of the stack smaller. */
  --shrink-factor: calc(var(--total) * 10);
  --goal-card-border-radius: 5dvh;
  --goal-card-height: calc(50dvh - (var(--side-padding) * 0.5));
  --goal-card-border-width: 4px;
  --knob: 0;

  display: grid;
  overflow-x: hidden;
  overflow-y: auto;
  width: 100%;
  height: 100%;
  animation-name: turn-scroll-knob;
  animation-duration: auto;
  scrollbar-width: none;
  overscroll-behavior-y: auto;
  scroll-snap-align: start;

  grid-template-columns: 1fr;
  grid-template-rows: repeat(var(--total), auto);
  grid-row: 1;
  grid-column: 1;
  translate: 0 calc(var(--goal-card-border-radius) * 1.5);
  animation-timeline: scroll(self block);

  & > * {
    --shrink: calc((var(--index) / var(--shrink-factor)));
    --brightness: calc(
      1 - (var(--index) / var(--dim-factor)) + var(--knob) * 0.25
    );
    --animation-duration: calc(var(--default-duration) * 2);
    --animation-delay: calc(var(--default-duration) * var(--index) * 0.25);

    position: sticky;
    z-index: calc(var(--total) - var(--index));
    top: 0;
    margin-block-end: -12dvh;
    transform: perspective(500px) rotateX(calc(var(--knob) * -1.8deg));
    animation: card var(--animation-duration) var(--animation-delay) backwards;
    filter: drop-shadow(0 0 10px #00000080) brightness(var(--brightness));
    translate: 0
      calc((var(--total) - var(--index)) * 7.5dvh + (var(--knob) * 25dvh));
    scale: calc(1 - var(--shrink) + var(--knob) * 0.07);
    grid-column: 1;
    /* Makes the cards appear in reverse order, with the first being last. */
    grid-row: calc(var(--total) - var(--index));
  }
}

@keyframes card {
  from {
    opacity: 0;
    translate: 0 calc((var(--total) - var(--index)) * 10dvh);
  }
}

@keyframes turn-scroll-knob {
  from {
    --knob: 1;
  }
  to {
    --knob: 0;
  }
}

.continueButton {
  --animation-delay: calc(var(--default-duration) * 3);
  --gap: 5px;
  --starting-fade-position-y: 40%;
  z-index: 1;
  align-self: end;
  width: calc(90% - var(--side-padding));
  margin-bottom: var(--block-padding);
  opacity: 0;
  animation: var(--fade-in-from-bottom) calc(var(--default-duration) * 1.2)
    var(--animation-delay) both;
  filter: drop-shadow(0 0 10px #0000003e);
  place-content: center;
  justify-self: center;
  grid-row: 1;
  grid-column: 1;
}
